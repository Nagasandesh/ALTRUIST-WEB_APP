{"version":3,"sources":["ChatHeader.js","Message.js","features/appSlice.js","features/userSlice.js","firebase.js","Chat.js","SidebarChannel.js","Sidebar.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ChatHeader","channelName","className","placeholder","Message","timestamp","user","message","Avatar","src","photo","displayName","Date","toDate","toUTCString","appSlice","createSlice","name","initialState","channelId","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","userSlice","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Chat","useSelector","useState","input","setInput","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","fontSize","value","disabled","onChange","e","target","type","onClick","preventDefault","add","FieldValue","serverTimestamp","SidebarChannel","id","dispatch","useDispatch","Sidebar","channels","setChannels","channel","prompt","signOut","uid","substring","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","store","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df08206b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ChatHeader.css';\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport EditLocationRoundedIcon from \"@material-ui/icons/EditLocationRounded\";\r\nimport PeopleAltRoundedIcon from \"@material-ui/icons/PeopleAltRounded\";\r\nimport SearchRoundedIcon from \"@material-ui/icons/SearchRounded\";\r\nimport SendRoundedIcon from \"@material-ui/icons/SendRounded\";\r\nimport HelpRoundedIcon from \"@material-ui/icons/HelpRounded\";\r\n\r\nfunction ChatHeader({ channelName }) {\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            <div className=\"chatHeader__left\">\r\n                <h3>\r\n                    <span className=\"ChatHeader__hash\">#</span>\r\n                    {channelName}\r\n                    </h3>\r\n            </div>\r\n\r\n            <div className=\"chatHeader__right\">\r\n              <NotificationsIcon />\r\n              <EditLocationRoundedIcon />\r\n              <PeopleAltRoundedIcon />\r\n\r\n              <div className=\"chatHeader__search\">\r\n                  <input placeholder=\"Search\" />\r\n                  <SearchRoundedIcon />\r\n              </div>\r\n                <SendRoundedIcon />\r\n                <HelpRoundedIcon />\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader\r\n","import React from 'react';\r\nimport './Message.css';\r\nimport { Avatar } from '@material-ui/core';\r\n\r\nfunction Message({ timestamp, user, message }) {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo} />\r\n            <div className=\"message__info\">\r\n                <h4>\r\n                    {user.displayName}\r\n                    <span className='message__timestamp'>{new Date(timestamp?.toDate()).toUTCString()}\r\n                    </span>\r\n                </h4>\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const appSlice = createSlice({\r\n  name: \"app\",\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null,\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n        state.channelId = action.payload.channelId;\r\n        state.channelName = action.payload.channelName;\r\n    },\r\n    \r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAeO5gxKn7moSJKy_ZqNsHZYEEw9FdwHXs\",\r\n    authDomain: \"altruist-643b8.firebaseapp.com\",\r\n    projectId: \"altruist-643b8\",\r\n    storageBucket: \"altruist-643b8.appspot.com\",\r\n    messagingSenderId: \"481765529953\",\r\n    appId: \"1:481765529953:web:c2af0ef0c62b167c0fcd20\",\r\n    measurementId: \"G-SJ1EZKVW0M\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Chat.css';\r\nimport ChatHeader from './ChatHeader';\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport GifIcon from \"@material-ui/icons/Gif\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";   \r\nimport Message from './Message';\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectChannelId, selectChannelName } from \"./features/appSlice\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport db from './firebase';\r\nimport firebase from \"firebase\";\r\n\r\nfunction Chat() {\r\n    const user = useSelector(selectUser); \r\n    const channelId = useSelector(selectChannelId);  \r\n    const channelName = useSelector(selectChannelName);\r\n    const [input, setInput] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (channelId) {\r\n            db.collection(\"channels\")\r\n            .doc(channelId)\r\n            .collection(\"messages\")\r\n            .orderBy(\"timestamp\", \"asc\")\r\n            .onSnapshot((snapshot) =>\r\n              setMessages(snapshot.docs.map((doc) => doc.data()))\r\n            );\r\n        }\r\n      }, [channelId]);\r\n\r\n      const sendMessage = (e) => {\r\n        e.preventDefault();\r\n\r\n        db.collection(\"channels\").doc(channelId).collection(\"messages\").add({\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            message: input,\r\n            user: user,\r\n          });\r\n      \r\n          setInput(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader channelName={channelName} />\r\n\r\n         <div className=\"chat__messages\">\r\n         {messages.map((message) => (\r\n          <Message\r\n            timestamp={message.timestamp}\r\n            message={message.message}\r\n            user={message.user}\r\n          />\r\n        ))}\r\n         </div>\r\n\r\n         <div className=\"chat__input\">\r\n            <AddCircleIcon fontSize=\"large\" />\r\n            <form>\r\n                <input\r\n                 value={input} \r\n                 disabled={!channelId}\r\n                 onChange={(e) => setInput(e.target.value)} \r\n                 placeholder= {'Message #${channelName}'}\r\n                 />\r\n                 <button \r\n                 disabled={!channelId}\r\n                 className=\"chat__inputButton\" type='submit' onClick={sendMessage}>\r\n                    Send Message\r\n                    </button>\r\n            </form>\r\n\r\n            <div className=\"chat__inputIcons\">\r\n            <GifIcon fontSize=\"large\" />\r\n            <EmojiEmotionsIcon fontSize=\"large\" />\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setChannelInfo } from './features/appSlice';\r\nimport \"./SidebarChannel.css\";\r\n\r\n\r\nfunction SidebarChannel({ id, channelName}) {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div className=\"sidebarChannel\" onClick={() => dispatch(\r\n            setChannelInfo({\r\n              channelId: id,\r\n              channelName: channelName,\r\n            })\r\n          )\r\n        }\r\n        >\r\n            \r\n            <h4><span className=\"sidebarChannel__hash\">#</span>{channelName}\r\n            </h4>\r\n            \r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default SidebarChannel\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Sidebar.css';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SidebarChannel from './SidebarChannel';\r\nimport { Avatar } from '@material-ui/core';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice';\r\nimport db, { auth } from './firebase';\r\n\r\n\r\nfunction Sidebar() {\r\n    const user = useSelector(selectUser);\r\n    const [channels, setChannels] = useState([]);   \r\n\r\n    useEffect(() => {\r\n        db.collection(\"channels\").onSnapshot((snapshot) =>\r\n        setChannels(\r\n          snapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            channel: doc.data(),\r\n          }))\r\n        )\r\n      );\r\n    }, []);\r\n\r\n    const handleAddChannel = () => {\r\n        const channelName = prompt(\"Enter a new channel name\");\r\n    \r\n        if (channelName) {\r\n          db.collection(\"channels\").add({\r\n            channelName: channelName,\r\n          });\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__top\">\r\n                <h3>Mysuru</h3>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n            <div className=\"sidebar__channels\">\r\n                <div className=\"sidebar__channelsHeader\">\r\n                    <div className=\"sidebar__header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Categories</h4>\r\n                    </div>\r\n\r\n                    <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\r\n                </div>\r\n\r\n                <div className=\"sidebar__channelsList\">\r\n                {channels.map(({ id, channel }) => (\r\n                <SidebarChannel \r\n                     key={id}\r\n                     id={id}\r\n                    channelName={channel.channelName}\r\n                /> \r\n                ))}\r\n            </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__profile\">\r\n                <Avatar onClick={() => auth.signOut()} src={user.photo} />\r\n                <div className=\"sidebar__profileInfo\">\r\n                    <h3>{user.displayName}</h3>\r\n                    <p>#{user.uid.substring (0 , 5)}</p>\r\n                </div>\r\n                <div className=\"sidebar__profileIcons\">\r\n                    <SettingsIcon />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar\r\n","import { Button } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { auth, provider } from './firebase';\r\nimport './Login.css';\r\nfunction Login() {\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider).catch((error) => alert(error.message));\r\n    }\r\n    return (\r\n        <div className='login'>        \r\n            <div className=\"login__logo\">\r\n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRsy-bhKsXq8DNFshaErEoJkWiI6jX5uHefKzSyq4SPQJtzZGXsUy6lMo2Y1bdu1ptXbv0&usqp=CAU\" \r\n                alt=\"\"/>\r\n            </div>   \r\n\r\n            <Button onClick={signIn}>Sign In</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport Chat from \"./Chat\";\nimport Sidebar from \"./Sidebar\";\nimport { selectUser } from \"./features/userSlice\";\nimport Login from \"./Login.js\";\nimport { auth } from \"./firebase\";\nimport { login, logout } from \"./features/userSlice\";\n\n\nfunction App() {\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // the user is logged in\n        dispatch(\n          login({\n            uid: authUser.uid,\n            photo: authUser.photoURL,\n            email: authUser.email,\n            displayName: authUser.displayName,\n          })\n        );\n      } else {\n        // the user is logged out\n        dispatch(logout());\n      }\n    });\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      {user ? (\n        <>\n          <Sidebar />\n          <Chat />\n        </>\n      ) : (\n        <Login />\n      )}\n    </div>\n  );\n}\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\nimport appReducer from \"../features/appSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    app: appReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}